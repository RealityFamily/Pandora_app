; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Pandora"
#define MyAppVersion "1.2"
#define MyAppPublisher "Diskill"
#define MyAppURL "https://www.diskill.ru/"
#define MyAppExeName "Pandora.exe"


; .Net 5 installer
#pragma include __INCLUDE__ + ";" + "W:\Program Files (x86)\Inno Download Plugin"
#include <idp.iss>


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{044DD5CB-B340-4B4E-AB34-04A241ADD952}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=admin
OutputDir=D:\Desktop\pandora
OutputBaseFilename=PandoraInstaller
SetupIconFile=W:\Projects\_GitHub\_RealityFamilyRepo\Pandora_app\image 20 (1).ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\Desktop\net5.0-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion

;Source: "D:\Desktop\net5.0-windows\de\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Desktop\net5.0-windows\de\MahApps.Metro.resources.dll"; DestDir: "{app}\de"; Flags: ignoreversion

Source: "D:\Desktop\net5.0-windows\Models"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

;Source: "D:\Desktop\net5.0-windows\ref\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Desktop\net5.0-windows\ref\Pandora.dll"; DestDir: "{app}\ref"; Flags: ignoreversion

;Source: "D:\Desktop\net5.0-windows\resources\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Desktop\net5.0-windows\resources\drawable\instruction.png"; DestDir: "{app}\resources\drawable"; Flags: ignoreversion

;Source: "D:\Desktop\net5.0-windows\Scripts\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Desktop\net5.0-windows\Scripts\3Ds_Max\pandora-loader.ms"; DestDir: "{app}\Scripts\3Ds_Max"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Scripts\Model\MaxMaterial.ms"; DestDir: "{app}\Scripts\Model"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Scripts\Model\Model.ms"; DestDir: "{app}\Scripts\Model"; Flags: ignoreversion

Source: "D:\Desktop\net5.0-windows\Zip"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "D:\Desktop\net5.0-windows\CommonServiceLocator.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\ControlzEx.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\dotnet.pas"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\GalaSoft.MvvmLight.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\GalaSoft.MvvmLight.Extras.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\GalaSoft.MvvmLight.Platform.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.BootstrapIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.BoxIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Codicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Core.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Entypo.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.EvaIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.FeatherIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.FileIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Fontaudio.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.FontAwesome.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.ForkAwesome.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Ionicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.JamIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Material.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.MaterialDesign.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.MaterialLight.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Microns.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Modern.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Octicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.PicolIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.PixelartIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.RadixIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.RemixIcon.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.RPGAwesome.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.SimpleIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Typicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Unicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.VaadinIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.WeatherIcons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\MahApps.Metro.IconPacks.Zondicons.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Microsoft.Xaml.Behaviors.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Pandora.deps.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Pandora.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Pandora.pdb"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Pandora.runtimeconfig.dev.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\Pandora.runtimeconfig.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Desktop\net5.0-windows\System.Windows.Interactivity.dll"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon




// Other parts of installer file go here

[CustomMessages]
IDP_DownloadFailed=Download of .NET 5 failed. .NET 5 Desktop runtime is required to run Pandora.
IDP_RetryCancel=Click 'Retry' to try downloading the files again, or click 'Cancel' to terminate setup.
InstallingDotNetRuntime=Installing .NET 5 Desktop Runtime. This might take a few minutes...
DotNetRuntimeFailedToLaunch=Failed to launch .NET Runtime Installer with error "%1". Please fix the error then run this installer again.
DotNetRuntimeFailed1602=.NET Runtime installation was cancelled. This installation can continue, but be aware that this application may not run unless the .NET Runtime installation is completed successfully.
DotNetRuntimeFailed1603=A fatal error occurred while installing the .NET Runtime. Please fix the error, then run the installer again.
DotNetRuntimeFailed5100=Your computer does not meet the requirements of the .NET Runtime. Please consult the documentation.
DotNetRuntimeFailedOther=The .NET Runtime installer exited with an unexpected status code "%1". Please review any other messages shown by the installer to determine whether the installation completed successfully, and abort this installation and fix the problem if it did not.


;.Net 5 installer script
[Code]

var
  requiresRestart: boolean;

function CompareVersion(V1, V2: string): Integer;
var
  P, N1, N2: Integer;
begin
  Result := 0;
  while (Result = 0) and ((V1 <> '') or (V2 <> '')) do
  begin
    P := Pos('.', V1);
    if P > 0 then
    begin
      N1 := StrToInt(Copy(V1, 1, P - 1));
      Delete(V1, 1, P);
    end
      else
    if V1 <> '' then
    begin
      N1 := StrToInt(V1);
      V1 := '';
    end
      else
    begin
      N1 := 0;
    end;
    P := Pos('.', V2);
    if P > 0 then
    begin
      N2 := StrToInt(Copy(V2, 1, P - 1));
      Delete(V2, 1, P);
    end
      else
    if V2 <> '' then
    begin
      N2 := StrToInt(V2);
      V2 := '';
    end
      else
    begin
      N2 := 0;
    end;
    if N1 < N2 then Result := -1
      else
    if N1 > N2 then Result := 1;
  end;
end;

function NetRuntimeIsMissing(): Boolean;
var
  runtimes: TArrayOfString;
  registryKey: string;
  I: Integer;
  meetsMinimumVersion: Boolean;
  meetsMaximumVersion: Boolean;
  minimumVersion: string;
  maximumExclusiveVersion: string;
begin
  Result := True;

  minimumVersion := '5.0.0';
  maximumExclusiveVersion := '5.1.0';
  registryKey := 'SOFTWARE\WOW6432Node\dotnet\Setup\InstalledVersions\x64\sharedfx\Microsoft.WindowsDesktop.App';
  if RegGetValueNames(HKLM, registryKey, runtimes) then
  begin
    for I := 0 to GetArrayLength(runtimes)-1 do
    begin
      meetsMinimumVersion := not (CompareVersion(runtimes[I], minimumVersion) = -1);
      meetsMaximumVersion := CompareVersion(runtimes[I], maximumExclusiveVersion) = -1;
      if meetsMinimumVersion and meetsMaximumVersion then
      begin
        Log(Format('[.NET] Selecting %s', [runtimes[I]]));
        Result := False;
          Exit;
      end;
    end;
  end;
end;

procedure InitializeWizard;
begin
  if NetRuntimeIsMissing() then
  begin
    idpAddFile('http://go.microsoft.com/fwlink/?linkid=2155258', ExpandConstant('{tmp}\NetRuntimeInstaller.exe'));
    idpDownloadAfter(wpReady);
  end;
end;

function InstallDotNetRuntime(): String;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := CustomMessage('InstallingDotNetRuntime');
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\NetRuntimeInstaller.exe'), '/passive /norestart /showrmui /showfinalerror', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      Result := FmtMessage(CustomMessage('DotNetRuntimeFailedToLaunch'), [SysErrorMessage(resultCode)]);
    end
    else
    begin
      // See https://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx#return_codes
      case resultCode of
        0: begin
          // Successful
        end;
        1602 : begin
          MsgBox(CustomMessage('DotNetRuntimeFailed1602'), mbInformation, MB_OK);
        end;
        1603: begin
          Result := CustomMessage('DotNetRuntimeFailed1603');
        end;
        1641: begin
          requiresRestart := True;
        end;
        3010: begin
          requiresRestart := True;
        end;
        5100: begin
          Result := CustomMessage('DotNetRuntimeFailed5100');
        end;
        else begin
          MsgBox(FmtMessage(CustomMessage('DotNetRuntimeFailedOther'), [IntToStr(resultCode)]), mbError, MB_OK);
        end;
      end;
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;
    
    DeleteFile(ExpandConstant('{tmp}\NetRuntimeInstaller.exe'));
  end;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  // 'NeedsRestart' only has an effect if we return a non-empty string, thus aborting the installation.
  // If the installers indicate that they want a restart, this should be done at the end of installation.
  // Therefore we set the global 'restartRequired' if a restart is needed, and return this from NeedRestart()

  if NetRuntimeIsMissing() then
  begin
    Result := InstallDotNetRuntime();
  end;
end;

function NeedRestart(): Boolean;
begin
  Result := requiresRestart;
end;

[Run]
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

